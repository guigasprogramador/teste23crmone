-- MySQL DDL for Authentication Tables

-- Users table
CREATE TABLE IF NOT EXISTS users (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255),
  microsoft_id VARCHAR(255) UNIQUE,
  avatar_url VARCHAR(500),
  role VARCHAR(50) NOT NULL DEFAULT 'user',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Index on email for users table
CREATE INDEX idx_users_email ON users(email);

-- User Profiles table
CREATE TABLE IF NOT EXISTS user_profiles (
  id CHAR(36) PRIMARY KEY,
  user_id CHAR(36) NOT NULL,
  bio TEXT,
  phone VARCHAR(20),
  address TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Index on user_id for user_profiles table
CREATE INDEX idx_user_profiles_user_id ON user_profiles(user_id);

-- User Preferences table
CREATE TABLE IF NOT EXISTS user_preferences (
  id CHAR(36) PRIMARY KEY,
  user_id CHAR(36) NOT NULL,
  email_notifications TINYINT(1) DEFAULT 1, -- 1 for TRUE, 0 for FALSE
  sms_notifications TINYINT(1) DEFAULT 0,   -- 1 for TRUE, 0 for FALSE
  theme VARCHAR(20) DEFAULT 'light',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Index on user_id for user_preferences table
CREATE INDEX idx_user_preferences_user_id ON user_preferences(user_id);

-- Refresh tokens table
CREATE TABLE IF NOT EXISTS refresh_tokens (
  id CHAR(36) PRIMARY KEY,
  user_id CHAR(36) NOT NULL,
  token TEXT NOT NULL, -- TEXT can store long tokens; consider VARCHAR(length) if max length known
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  expires_at TIMESTAMP NOT NULL,
  is_revoked TINYINT(1) DEFAULT 0, -- 1 for TRUE, 0 for FALSE
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Index on user_id for refresh_tokens table
CREATE INDEX idx_refresh_tokens_user_id ON refresh_tokens(user_id);
-- Note: Indexing a TEXT column directly like in idx_refresh_tokens_token might not be efficient or allowed on all MySQL versions/configurations without specifying a prefix length.
-- If token is TEXT and needs to be unique and indexed for fast lookups, consider:
-- 1. Using VARCHAR with a reasonable max length if possible.
-- 2. Creating a HASH of the token and indexing that.
-- 3. Adding a UNIQUE constraint on the token column if it's VARCHAR.
-- For now, omitting direct index on TEXT token, but adding UNIQUE constraint.
ALTER TABLE refresh_tokens ADD CONSTRAINT uq_refresh_tokens_token UNIQUE (token(255)); -- Max prefix length for InnoDB is often 767 bytes or 3072 bytes depending on version/settings. 255 for UTF8MB4 char.

-- Roles table
CREATE TABLE IF NOT EXISTS roles (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Permissions table
CREATE TABLE IF NOT EXISTS permissions (
  id CHAR(36) PRIMARY KEY,
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Role permissions junction table
CREATE TABLE IF NOT EXISTS role_permissions (
  role_id CHAR(36) NOT NULL,
  permission_id CHAR(36) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (role_id, permission_id),
  FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,
  FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE
);

-- Notes on omitted items:
-- 1. Default UUID generation: `uuid_generate_v4()` is PostgreSQL specific.
--    In MySQL, UUIDs should be generated by the application (recommended) or using `UUID()` function if MySQL 8.0+.
--    The DDL uses `CHAR(36)` for UUID columns.
-- 2. `update_updated_at_column` trigger: MySQL can handle automatic `updated_at` using `ON UPDATE CURRENT_TIMESTAMP`.
--    This has been added to `users`, `user_profiles`, and `user_preferences` tables.
-- 3. `cleanup_expired_tokens` function and cron job: This logic needs to be implemented separately,
--    e.g., as a scheduled event in MySQL or an application-level background job.
-- 4. `INSERT` statements and `DO $$ ... END $$;` blocks for initial data: These are omitted from DDL.
--    Data should be inserted via separate scripts or application logic.
-- 5. RLS policies: MySQL does not have Row Level Security in the same way as PostgreSQL.
--    Access control is typically managed via GRANT/REVOKE permissions at table/column level,
--    or implemented in the application layer or using views with definer rights.
-- 6. `crmonefactory` schema: The DDL does not prefix table names with a schema/database name.
--    This should be handled by connecting to the correct database before running the script
--    or by adding `database_name.` prefix to table names if needed.
-- 7. `users_id_fkey` constraint removal from `crmonefactory.users`: This seems to be a fix for an existing Supabase setup and is not part of the core DDL generation for new tables.
-- 8. `microsoft_id` in `users` table from `auth-schema.sql` was kept.
-- 9. `role` column in `users` table from `auth-schema.sql` was kept (VARCHAR(50) DEFAULT 'user').
--    The `solution-final-ajustado.sql` had `VARCHAR(20)`. Preference given to `auth-schema.sql`.
-- 10. `refresh_tokens.token` was `TEXT` in `auth-schema.sql` and `VARCHAR(255)` in `solution-final-ajustado.sql`.
--     Used `TEXT` as per `auth-schema.sql` but added a note about indexing and uniqueness.
--     Added a UNIQUE constraint with prefix for the TEXT token.
-- 11. `is_revoked` in `refresh_tokens` from `auth-schema.sql` was kept.
-- 12. `avatar_url` in `users` was VARCHAR(500) in `auth-schema.sql` and VARCHAR(255) in `solution-final-ajustado.sql`.
--     Used VARCHAR(500) as per `auth-schema.sql`.
-- 13. `password` in `users` was `VARCHAR(255)` in `auth-schema.sql` and `VARCHAR(255) NOT NULL` in `solution-final-ajustado.sql`.
--     Used `VARCHAR(255)` (nullable) as per `auth-schema.sql` as some auth methods (e.g. Microsoft ID) might not use a local password.
-- 14. `created_at` and `updated_at` for `user_profiles` and `user_preferences` are set to `DEFAULT CURRENT_TIMESTAMP` and `ON UPDATE CURRENT_TIMESTAMP` for `updated_at`.
-- 15. `user_id` foreign keys in `user_profiles`, `user_preferences`, `refresh_tokens` all point to `users(id) ON DELETE CASCADE`.
-- 16. Dropped `IF EXISTS` from `CREATE INDEX` as it's not standard in MySQL (index creation will fail if it exists).
--     Table creation uses `IF NOT EXISTS`.
-- 17. `PRIMARY KEY` for `id` columns are defined directly.
-- 18. `UNIQUE` constraints are defined directly for columns like `email`, `name` in `roles`/`permissions`.

/*
-- Example of how to insert a UUID in MySQL 8.0+ if needed (or generate in app):
-- INSERT INTO users (id, name, email, password, role)
-- VALUES (UUID(), 'Test User', 'test@example.com', 'password123', 'user');
*/
